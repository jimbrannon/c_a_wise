<?php

/**
 * @file Content Access WISE Extension module file
 */

function c_a_wise_block_info() {
	/*
	 * get the c_a_wise module parameters
	 */
	$parameter_query = db_select("c_a_wise")
	->fields('c_a_wise',array('block_info'))
	->orderBy('c_a_wise_id','ASC');
	$parameter_query_results = $parameter_query->execute()->fetchAll();
	$info='';
	foreach($parameter_query_results as $parameter_record) {
		$info = $parameter_record->block_info;
	}
	$blocks = array();
	$blocks['c_a_wise_block'] = array(
			'status' => 1,
			'region' => 'sidebar_first',
			'info' => t($info),
			'cache' => DRUPAL_NO_CACHE,
	);
	return $blocks;
}

function c_a_wise_block_view($delta = '') {
	/*
	 * get the c_a_wise module parameters
	 */
	$parameter_query = db_select("c_a_wise")
	->fields('c_a_wise',array('block_title','block_subject'))
	->orderBy('c_a_wise_id','ASC');
	$parameter_query_results = $parameter_query->execute()->fetchAll();
	$title='';
	$subject='';
	foreach($parameter_query_results as $parameter_record) {
		$title = $parameter_record->block_title;
		$subject = $parameter_record->block_subject;
	}
	$block = array();
	switch ($delta) {
		case 'c_a_wise_block' :
			$block['title'] = t($title);
			$block['subject'] = t($subject);
			$block['content'] = c_a_wise_block_content();
			break;
	}
	return $block;
}

function c_a_wise_block_content() {
	return drupal_get_form('c_a_wise_form');
}

/*
 * implement hook_form()
 */
function c_a_wise_form($form,&$form_state) {
	$form = array();
	/*
	 * get the c_a_wise module parameters
	 */
	$parameter_query = db_select("c_a_wise")
	->fields('c_a_wise',
			array('checkbox_title',
				'checkbox_description',
				'checkbox_weight',
				'partners_on_label',
				'partners_on_weight',
				'partners_off_label',
				'partners_off_weight',
				'submit_label',
				'submit_weight',))
	->orderBy('c_a_wise_id','ASC');
	$parameter_query_results = $parameter_query->execute()->fetchAll();
	$checkbox_title='';
	foreach($parameter_query_results as $parameter_record) {
		$checkbox_title = $parameter_record->checkbox_title;
		$checkbox_description = $parameter_record->checkbox_description;
		$checkbox_weight = $parameter_record->checkbox_weight;
		$submit_label_toggle_on = $parameter_record->partners_on_label;
		$partners_on_weight = $parameter_record->partners_on_weight;
		$submit_label_toggle_off = $parameter_record->partners_off_label;
		$partners_off_weight = $parameter_record->partners_off_weight;
		$submit_label = $parameter_record->submit_label;
		$submit_weight = $parameter_record->submit_weight;
	}
	/*
	 * get the list of controlled roles (by rid) to control from the rid table
	 */
	$rid_query = db_select("c_a_wise_rid")
	->fields('c_a_wise_rid',array('rid','name','status'))
	->condition('status',0,">")
	->orderBy('ndx','ASC');
	$rid_query_results = $rid_query->execute()->fetchAll();
	// drupal_set_message(sprintf('<pre>%s</pre>', print_r($rid_query_results, TRUE)));
	/*
	 * create a checkbox list of the controlled role names
	 */
	$role_checkbox_options = array();
	$role_checkbox_defaults = array();
	$role_counter = 0;
	foreach($rid_query_results as $rid_record) {
		$rid = $rid_record->rid;
		//drupal_set_message(t('role id = @var', array('@var' => $rid_record->rid)));
		//drupal_set_message(t('role name = @var', array('@var' => $rid_record->name)));
		
		/*
		 * get the role object from drupal
		 */
		if($rid_record->status) { // it is a value greater than 0 so put it in the list of roles to select from, 1 means non partner, 2 means partner
			$role = user_role_load($rid);
			if($role) { // i.e. if this is a valid role (hopefully always), then ...
				$role_counter++;
				/*
				 * use the role name entered by the user, if none, use drupal's internal role name
				 */
				if(strlen($rid_record->name)) {
					$role_checkbox_options[$rid_record->rid] = $rid_record->name;
				} else {
					$role_checkbox_options[$rid_record->rid] = $role->name;
				}
				//drupal_set_message(t('role label = @var', array('@var' => $role_checkbox_options[$rid_record->rid])));
				/*
				 * now set the default for this role
				 * 
				 * first check if the partner all or partner none button was pressed immediately
				 *   prior to getting here
				 * if so, then a flag will be set
				 *   and then set this role default based on which button was pressed:
				 *   on - all partner roles will be turned on and others will be set to the state
				 *     at the time the button was pressed (thank you triggering element trick)
				 *   off - all partner roles will be turned off and others will be set to the state
				 *     at the time the button was pressed (thank you triggering element trick)
				 *   anything else - find the default as set in the database
				 */
				if (variable_get('submit_toggle_partner_on',FALSE)) {
					/*
					 * all/none button pressed,
					 * so see if this role is a partner role
					 */
					//drupal_set_message(t('submit_toggle_partner_on'));
					switch ($rid_record->status) {
						case 1: // it is a non partner role, set default to the state it was in
							// check if this role was on in the previous checkbox list state
							// add it to the defaults if so
							$checkbox_list_state = variable_get('wise_roles_checkboxes_value',array());
							if(in_array($rid,$checkbox_list_state)) {
								$role_checkbox_defaults[] = $rid;
							}
							break;
						case 2: // it is a partner role, turn it on, add it to defaults
							$role_checkbox_defaults[] = $rid;
							break;
						default:
							// do nothing - should not get here
					}
				} elseif (variable_get('submit_toggle_partner_off',FALSE)) {
					/*
					 * all/none button pressed,
					 * so see if this role is a partner role
					 */
					//drupal_set_message(t('submit_toggle_partner_off'));
					switch ($rid_record->status) {
						case 1: // it is a non partner role, set default to the state it was in
							// check if this role was on in the previous checkbox list state
							// add it to the defaults if so
							$checkbox_list_state = variable_get('wise_roles_checkboxes_value',array());
							if(in_array($rid,$checkbox_list_state)) {
								$role_checkbox_defaults[] = $rid;
							}
							break;
						case 2: // it is a partner role, turn it off, i.e. don't add it to defaults
							break;
						default:
							// do nothing - should not get here
					}
				} else {
					/*
					 * first try to set the default value based on the view_any permission
					 * of any nodes associated with this role
					 * this is hardwired to the view_any permission field ("view") setting
					 * in the c_a_wise_ridnid database table
					 * if any are set to true, then assume the role checkbox should be "on"
					 */
					//drupal_set_message(t('neither toggle button pressed'));
					$found_default = FALSE;
					$access_type_for_defaults = 'view';
					$ridnid_query = db_select("c_a_wise_ridnid")
					->fields('c_a_wise_ridnid',array('rid','nid'))
					->condition('rid',$rid,"=");
					$ridnid_query_results = $ridnid_query->execute()->fetchAll();
					//drupal_set_message(sprintf('<pre>%s</pre>', print_r($ridnid_query_results, TRUE)));
					foreach($ridnid_query_results as $ridnid_record) {
						 //drupal_set_message(sprintf('<pre>%s</pre>', print_r($ridnid_record, TRUE)));
						 //drupal_set_message(sprintf('<pre>%s</pre>', print_r($ridnid_record->rid, TRUE)));
					
						if(!$found_default) {
							$nid = $ridnid_record->nid;
							// drupal_set_message(sprintf('<pre>node id = %s</pre>', print_r($nid, TRUE)));
							$node = node_load($nid);
							if($node) {
								$permissions=array();
								$permissions = content_access_get_per_node_settings($node);
								// drupal_set_message(sprintf('<pre>%s</pre>', print_r($permissions, TRUE)));
								if($permissions) {
									/*
									 * check the view_any array
									 */
									$view_any = $permissions[$access_type_for_defaults];
									// drupal_set_message(sprintf('<pre>%s</pre>', print_r($view_any, TRUE)));
									if (in_array($rid,$view_any)) {
										$role_checkbox_defaults[] = $rid;
										$found_default = TRUE;
									}
								}
							}
						}
					}
					/*
					 * if we did not find any nodes with the view permission set to true
					 * we are not done
					 * there might be some blocks associated with this role
					 * so check whether they are set to be visible
					 * set the defaults based on the block settings
					 *   i.e. see if there is a record for this rid in the block_role table
					 *   assumes that if role is controlled and one case is found,
					 *   then intent is for all cases to be managed identically
					 */
					if(!$found_default) {
						$ridblock_query = db_select("c_a_wise_ridblock")
						->fields('c_a_wise_ridblock',array('module','delta','rid'))
						->condition('rid',$rid,"=");
						$ridblock_query_results = array();
						$ridblock_query_results = $ridblock_query->execute()->fetchAll();
						if($ridblock_query_results) {
							foreach($ridblock_query_results as $ridblock_record) {
								if(!$found_default) {
									$blockrole_query = db_select("block_role")
									->fields('block_role',array('module','delta','rid'))
									->condition('module',$ridblock_record->module,"=")
									->condition('delta',$ridblock_record->delta,"=")
									->condition('rid',$rid,"=");
									$blockrole_query_results = array();
									$blockrole_query_results = $blockrole_query->execute()->fetchAll();
									if($blockrole_query_results) {
										$role_checkbox_defaults[] = $rid;
										$found_default = TRUE;
									}
								}
							}
						}
					}
				}
			}
		}
	}
	/*
	 * clear the special button flags
	 */
	variable_set('submit_toggle_partner_on',FALSE);
	variable_set('submit_toggle_partner_off',FALSE);
	variable_set('submit',FALSE);
	/*
	 * create the role checkbox list render array,
	 * hopefully with the defaults now set correctly based on what happened
	 *   immediately prior to this routine getting called
	 */
	$form['wise_roles_checkboxes'] = array(
			'#type' => 'checkboxes',
			'#title' => t($checkbox_title),
			'#description' => t($checkbox_description),
			'#options' => $role_checkbox_options,
			'#default_value' => $role_checkbox_defaults,
			'#weight' => $checkbox_weight,
	);
	
	// create the render arrays for the toggle on off buttons
	$form['submit_toggle_partner_on'] = array(
			'#type' => 'submit',
			'#name' => 'submit_toggle_partner_on',
			//'#validate' => array(
			//		'c_a_wise_form_toggle_on_validate',
			//),
			//'#limit_validation_errors' => array(),
			//'#submit' => array(
			//		'c_a_wise_form_toggle_on_submit',
			//),
			'#buttontype' => 'button',
			'#value' => t($submit_label_toggle_on),
			'#weight' => $partners_on_weight,
	);
	$form['submit_toggle_partner_off'] = array(
			'#type' => 'submit',
			'#name' => 'submit_toggle_partner_off',
			//'#validate' => array(
			//		'c_a_wise_form_toggle_off_validate'
			//),
			//'#limit_validation_errors' => array(),
			//'#submit' => array(
			//		'c_a_wise_form_toggle_off_submit'
			//),
			'#buttontype' => 'button',
			'#value' => t($submit_label_toggle_off),
			'#weight' => $partners_off_weight,
	);
	$form['submit_button'] = array(
			'#type' => 'submit',
			'#name' => 'submit_button',
			'#value' => t($submit_label),
			'#weight' => $submit_weight,
			//'#submit' => array(
			//		'c_a_wise_form_submit'
			//),
	);
	$form['#after_build'][] = 'c_a_wise_form_force_triggering_element';
	return $form;
}
//this function is called before drupal processes the form submit hook
function c_a_wise_form_force_triggering_element($form, &$form_state) {
	/*
	 * the triggering element variable gets set based on which button was pressed
	 * the idea is that it is set (has a value) right after the button is pressed,
	 *   but NOT later (in the drupal form processing) when this function seems to get called again
	 *   so checking with isset() is a way to add some code to fire RIGHT AFTER an all or nothing button is pressed
	 *   but we want this function to do nothing on other calls
	 *   the code we want to add should save in a drupal variable which button was pressed
	 *     and clear out all the other button press saves so only one is ever set at a time
	 *     then when the form is drawn it can look for this variable and set the default values accordingly
	 *     also, we will have to save any changes the user has made to other form elements
	 *     and restore them when the form is redrawn.
	 *     this means essentially that EVERY form element will need to have it's state saved
	 *     so it can be restored when the form is redrawn.
	 */
	//drupal_set_message(t('triggering routine form_state'));
	//debug($form_state,microtime(true));
	if(isset($form_state['triggering_element'])) {
	    //drupal_set_message(t('triggering element set'));
		$triggering_element_name = $form_state['triggering_element']['#name'];
		//debug($form_state['triggering_element'],microtime(true).' c_a_wise_form_force_triggering_element: a triggering_element is set; the name is:');
		switch ($triggering_element_name) {
			case 'submit_toggle_partner_on':
	    		//drupal_set_message(t('submit_toggle_partner_on'));
				// save the state of the checkboxes
				variable_set('wise_roles_checkboxes_value',$form_state['values']['wise_roles_checkboxes']);
				// save flags to establish which button was pushed
				variable_set('submit_toggle_partner_on',true);
				variable_set('submit_toggle_partner_off',false);
				variable_set('submit',false);
				// what is this for?
				$form_state['triggering_element'] = $form['submit_toggle_partner_on'];
				break;
			case 'submit_toggle_partner_off':
	    		//drupal_set_message(t('submit_toggle_partner_off'));
				// save the state of the checkboxes
				variable_set('wise_roles_checkboxes_value',$form_state['values']['wise_roles_checkboxes']);
				// save flags to establish which button was pushed
				variable_set('submit_toggle_partner_on',false);
				variable_set('submit_toggle_partner_off',true);
				variable_set('submit',false);
				// what is this for?
				$form_state['triggering_element'] = $form['submit_toggle_partner_off'];
				break;
			case 'submit_button':
	    		//drupal_set_message(t('submit_button'));
				// save the state of the checkboxes
				variable_set('wise_roles_checkboxes_value',$form_state['values']['wise_roles_checkboxes']);
				// save flags to establish which button was pushed
				variable_set('submit_toggle_partner_on',false);
				variable_set('submit_toggle_partner_off',false);
				variable_set('submit',true);
				// what is this for?
				$form_state['triggering_element'] = $form['submit_button'];
				break;
			default:
	    		//drupal_set_message(t('default'));
				// save the state of the checkboxes
				variable_set('wise_roles_checkboxes_value',$form_state['values']['wise_roles_checkboxes']);
				// save flags to establish which button was pushed
				variable_set('submit_toggle_partner_on',false);
				variable_set('submit_toggle_partner_off',false);
				variable_set('submit',false);
				// what is this for?
				$form_state['triggering_element'] = $form['submit_button'];
		}
	}
	return $form;
}

/*
function theme_c_a_wise_form($variables) {
	$form = $variables['form'];
	$output = '';
    $output .= '<div class= c_a_wise_submit_toggle_partner_on">';
    $output .= drupal_render($form['submit_toggle_partner_on']);
    $output .= '</div>';
    $output .= '<div class= c_a_wise_submit_toggle_partner_off">';
    $output .= drupal_render($form['submit_toggle_partner_off']);
    $output .= '</div>';
    $output .= '<div class= c_a_wise_role_checkboxes">';
    $output .= drupal_render($form['wise_roles_checkboxes']);
    $output .= '</div>';
    $output .= '<div class= c_a_wise_submit">';
    $output .= drupal_render($form['submit_button']);
    $output .= '</div>';
    return $output;
}
*/

function c_a_wise_form_validate(&$form, &$form_state) {
}
//function c_a_wise_form_toggle_on_validate(&$form, &$form_state) {
//}
//function c_a_wise_form_toggle_off_validate(&$form, &$form_state) {
//}
//function c_a_wise_form_toggle_on_submit(&$form, &$form_state) {
//}
//function c_a_wise_form_toggle_off_submit(&$form, &$form_state) {
//}
function c_a_wise_form_submit(&$form, &$form_state) {
	/*
	 * loop through the roles and update the content access records appropriately
	 */
	//drupal_set_message(t('checkboxes'));
	//drupal_set_message(sprintf('<pre>%s</pre>', print_r($form_state['values']['wise_roles_checkboxes'], TRUE)));
	$selected_roles = array_filter($form_state['values']['wise_roles_checkboxes']);
	//drupal_set_message(t('selected roles'));
	//drupal_set_message(sprintf('<pre>%s</pre>', print_r($selected_roles, TRUE)));
	foreach($form_state['values']['wise_roles_checkboxes'] as $rid=>$rid_selected) {
		// drupal_set_message(sprintf('<pre>%s</pre>', print_r($rid, TRUE)));
		// drupal_set_message(sprintf('<pre>%s</pre>', print_r($rid_selected, TRUE)));
		/*
		 * get the role object from drupal
		 */
		$role = array();
		$role = user_role_load($rid);
		/*
		 * if it is a legitimate role
		 */
		if($role) {
			//drupal_set_message(sprintf('<pre>valid role rid %s</pre>', print_r($rid, TRUE)));
			/*
			* find the node records for this role according to the WISE ridnid table
			*/
			$ridnid_query = db_select("c_a_wise_ridnid")
			->fields('c_a_wise_ridnid',array('rid','nid','view','view_own','upd8','upd8_own','d7337','d7337_own'))
			->condition('rid',$rid,"=");
			$ridnid_query_results = $ridnid_query->execute()->fetchAll();
			/*
			 * for each node record
			 */
			foreach($ridnid_query_results as $ridnid_record) {
				/*
				 * get the ridnid record field values
				 */
				$nid = $ridnid_record->nid;
				$view = $ridnid_record->view;
				$view_own = $ridnid_record->view_own;
				$update = $ridnid_record->upd8;
				$update_own = $ridnid_record->upd8_own;
				$delete = $ridnid_record->d7337;
				$delete_own = $ridnid_record->d7337_own;
				/*
				 * see if this is a valid node
				 */
				$node = array();
				$node = node_load($nid);
				if ($node) {
					//drupal_set_message(sprintf('<pre>valid node nid %s</pre>', print_r($nid, TRUE)));
					/*
					* node is valid, so update the content access record
					*/
					if($rid_selected>0) {
						//drupal_set_message(sprintf('<pre>role selected %s</pre>', print_r($role->name, TRUE)));
						/*
						* this role was selected in the checkboxes
						* try to get the content access record
						*/
						$permissions = array();
						$permissions = content_access_get_per_node_settings($node);
						if (isset($permissions)) {
							/*
							 * C A has a record for this node
							 */
							//drupal_set_message(sprintf('<pre>CA has record %s</pre>', print_r($permissions, TRUE)));
							/*
							* rebuild permissions as new_permissions
							*/
							$new_permissions = array();
							/*
							 * the view access settings
							 */
							if ($view) {
								/*
								 * rebuild, adding this role if necessary
								 * sure hope it is not order dependent!!
								 */
								$foundit=FALSE;
								$counter=0;
								foreach($permissions['view'] as $index=>$role_id) {
									$new_permissions['view'][$counter] = $role_id;
									$counter++;
									if ($role_id == $rid) {
										$foundit = TRUE;
									}
								}
								if (!$foundit) {
									$new_permissions['view'][$counter] = $rid;
								}
							} else {
								/*
								 * use existing
								 */
								$new_permissions['view'] = $permissions['view'];
							}
							/*
							 * the view_own access settings
							 */
							if ($view_own) {
								/*
								 * rebuild, adding this role if necessary
								 * sure hope it is not order dependent!!
								 */
								$foundit=FALSE;
								$counter=0;
								foreach($permissions['view_own'] as $index=>$role_id) {
									$new_permissions['view_own'][$counter] = $role_id;
									$counter++;
									if ($role_id == $rid) {
										$foundit = TRUE;
									}
								}
								if (!$foundit) {
									$new_permissions['view_own'][$counter] = $rid;
								}
							} else {
								/*
								 * use existing
								 */
								$new_permissions['view_own'] = $permissions['view_own'];
							}
							/*
							 * the update access settings
							 */
							if ($update) {
								/*
								 * rebuild, adding this role if necessary
								 * sure hope it is not order dependent!!
								 */
								$foundit=FALSE;
								$counter=0;
								foreach($permissions['update'] as $index=>$role_id) {
									$new_permissions['update'][$counter] = $role_id;
									$counter++;
									if ($role_id == $rid) {
										$foundit = TRUE;
									}
								}
								if (!$foundit) {
									$new_permissions['update'][$counter] = $rid;
								}
							} else {
								/*
								 * use existing
								 */
								$new_permissions['update'] = $permissions['update'];
							}
							/*
							 * the update_own access settings
							 */
							if ($update_own) {
								/*
								 * rebuild, adding this role if necessary
								 * sure hope it is not order dependent!!
								 */
								$foundit=FALSE;
								$counter=0;
								foreach($permissions['update_own'] as $index=>$role_id) {
									$new_permissions['update_own'][$counter] = $role_id;
									$counter++;
									if ($role_id == $rid) {
										$foundit = TRUE;
									}
								}
								if (!$foundit) {
									$new_permissions['update_own'][$counter] = $rid;
								}
							} else {
								/*
								 * use existing
								 */
								$new_permissions['update_own'] = $permissions['update_own'];
							}
							/*
							 * the delete access settings
							 */
							if ($delete) {
								/*
								 * rebuild, adding this role if necessary
								 * sure hope it is not order dependent!!
								 */
								$foundit=FALSE;
								$counter=0;
								foreach($permissions['delete'] as $index=>$role_id) {
									$new_permissions['delete'][$counter] = $role_id;
									$counter++;
									if ($role_id == $rid) {
										$foundit = TRUE;
									}
								}
								if (!$foundit) {
									$new_permissions['delete'][$counter] = $rid;
								}
							} else {
								/*
								 * use existing
								 */
								$new_permissions['delete'] = $permissions['delete'];
							}
							/*
							 * the delete_own access settings
							 */
							if ($delete_own) {
								/*
								 * rebuild, adding this role if necessary
								 * sure hope it is not order dependent!!
								 */
								$foundit=FALSE;
								$counter=0;
								foreach($permissions['delete_own'] as $index=>$role_id) {
									$new_permissions['delete_own'][$counter] = $role_id;
									$counter++;
									if ($role_id == $rid) {
										$foundit = TRUE;
									}
								}
								if (!$foundit) {
									$new_permissions['delete_own'][$counter] = $rid;
								}
							} else {
								/*
								 * use existing
								 */
								$new_permissions['delete_own'] = $permissions['delete_own'];
							}
							//drupal_set_message(sprintf('<pre>CA has record %s</pre>', print_r($new_permissions, TRUE)));
							content_access_save_per_node_settings($node, $new_permissions);
							node_access_acquire_grants($node);
							module_invoke_all('per_node', $new_permissions);
						} else {
							/*
							 * C A has no record for this node
							 * really should not happen, but create one with admin permissions only plus the role (not the defaults)
							 */
							//drupal_set_message(sprintf('<pre>CA has no record %s</pre>', print_r($permissions, TRUE)));
							/*
							* rebuild permissions as new_permissions
							*/
							$new_permissions = array();
							/*
							 * the view access settings
							 */
							if ($view) {
								/*
								 * rebuild, adding this role
								 * sure hope it is not order dependent!!
								 */
								$new_permissions['view'][0] = $rid;
								$new_permissions['view'][1] = 3; // admin
							} else {
								$new_permissions['view'][0] = 3; // admin
							}
							/*
							 * the view_own access settings
							 */
							if ($view_own) {
								/*
								 * rebuild, adding this role
								 * sure hope it is not order dependent!!
								 */
								$new_permissions['view_own'][0] = $rid;
								$new_permissions['view_own'][1] = 3; // admin
							} else {
								$new_permissions['view_own'][0] = 3; // admin
							}
							/*
							 * the update access settings
							 */
							if ($update) {
								/*
								 * rebuild, adding this role
								 * sure hope it is not order dependent!!
								 */
								$new_permissions['update'][0] = $rid;
								$new_permissions['update'][1] = 3; // admin
							} else {
								$new_permissions['update'][0] = 3; // admin
							}
							/*
							 * the update_own access settings
							 */
							if ($update_own) {
								/*
								 * rebuild, adding this role
								 * sure hope it is not order dependent!!
								 */
								$new_permissions['update_own'][0] = $rid;
								$new_permissions['update_own'][1] = 3; // admin
							} else {
								$new_permissions['update_own'][0] = 3; // admin
							}
							/*
							 * the delete access settings
							 */
							if ($delete) {
								/*
								 * rebuild, adding this role
								 * sure hope it is not order dependent!!
								 */
								$new_permissions['delete'][0] = $rid;
								$new_permissions['delete'][1] = 3; // admin
							} else {
								$new_permissions['delete'][0] = 3; // admin
							}
							/*
							 * the delete_own access settings
							 */
							if ($delete_own) {
								/*
								 * rebuild, adding this role
								 * sure hope it is not order dependent!!
								 */
								$new_permissions['delete_own'][0] = $rid;
								$new_permissions['delete_own'][1] = 3; // admin
							} else {
								$new_permissions['delete_own'][0] = 3; // admin
							}
							//drupal_set_message(sprintf('<pre>CA has record %s</pre>', print_r($new_permissions, TRUE)));
							content_access_save_per_node_settings($node, $new_permissions);
							node_access_acquire_grants($node);
							module_invoke_all('per_node', $new_permissions);
						}
					} else {
						//drupal_set_message(sprintf('<pre>role not selected %s</pre>', print_r($role->name, TRUE)));
						/*
						* this role was not selected
						* try to get the content access record
						*/
						$permissions = array();
						$permissions = content_access_get_per_node_settings($node);
						if (isset($permissions)) {
							/*
							 * C A has record for this node
							 */
							//drupal_set_message(sprintf('<pre>CA has record %s</pre>', print_r($permissions, TRUE)));
							/*
							* rebuild permissions as new_permissions
							* removing this role if it is there
							*/
							$new_permissions = array();
							/*
							 * the view access settings
							 */
							if ($view) {
								/*
								 * rebuild, adding this role if necessary
								 * sure hope it is not order dependent!!
								 */
								$counter=0;
								foreach($permissions['view'] as $index=>$role_id) {
									if ($role_id == $rid) {
										// don't add it
									} else {
										$new_permissions['view'][$counter] = $role_id;
										$counter++;
									}
								}
							} else {
								/*
								 * use existing
								 */
								$new_permissions['view'] = $permissions['view'];
							}
							/*
							 * the view_own access settings
							 */
							if ($view_own) {
								/*
								 * rebuild, adding this role if necessary
								 * sure hope it is not order dependent!!
								 */
								$counter=0;
								foreach($permissions['view_own'] as $index=>$role_id) {
									if ($role_id == $rid) {
										// don't add it
									} else {
										$new_permissions['view_own'][$counter] = $role_id;
										$counter++;
									}
								}
							} else {
								/*
								 * use existing
								 */
								$new_permissions['view_own'] = $permissions['view_own'];
							}
							/*
							 * the update access settings
							 */
							if ($update) {
								/*
								 * rebuild, adding this role if necessary
								 * sure hope it is not order dependent!!
								 */
								$counter=0;
								foreach($permissions['update'] as $index=>$role_id) {
									if ($role_id == $rid) {
										// don't add it
									} else {
										$new_permissions['update'][$counter] = $role_id;
										$counter++;
									}
								}
							} else {
								/*
								 * use existing
								 */
								$new_permissions['update'] = $permissions['update'];
							}
							/*
							 * the update_own access settings
							 */
							if ($update_own) {
								/*
								 * rebuild, adding this role if necessary
								 * sure hope it is not order dependent!!
								 */
								$counter=0;
								foreach($permissions['update_own'] as $index=>$role_id) {
									if ($role_id == $rid) {
										// don't add it
									} else {
										$new_permissions['update_own'][$counter] = $role_id;
										$counter++;
									}
								}
							} else {
								/*
								 * use existing
								 */
								$new_permissions['update_own'] = $permissions['update_own'];
							}
							/*
							 * the delete access settings
							 */
							if ($delete) {
								/*
								 * rebuild, adding this role if necessary
								 * sure hope it is not order dependent!!
								 */
								$counter=0;
								foreach($permissions['delete'] as $index=>$role_id) {
									if ($role_id == $rid) {
										// don't add it
									} else {
										$new_permissions['delete'][$counter] = $role_id;
										$counter++;
									}
								}
							} else {
								/*
								 * use existing
								 */
								$new_permissions['delete'] = $permissions['delete'];
							}
							/*
							 * the delete_own access settings
							 */
							if ($delete_own) {
								/*
								 * rebuild, adding this role if necessary
								 * sure hope it is not order dependent!!
								 */
								$counter=0;
								foreach($permissions['delete_own'] as $index=>$role_id) {
									if ($role_id == $rid) {
										// don't add it
									} else {
										$new_permissions['delete_own'][$counter] = $role_id;
										$counter++;
									}
								}
							} else {
								/*
								 * use existing
								 */
								$new_permissions['delete_own'] = $permissions['delete_own'];
							}
							//drupal_set_message(sprintf('<pre>CA has record %s</pre>', print_r($new_permissions, TRUE)));
							content_access_save_per_node_settings($node, $new_permissions);
							node_access_acquire_grants($node);
							module_invoke_all('per_node', $new_permissions);
								
						} else {
							/*
							 * C A has no record for this node
							 * really should not happen, but create one with admin permissions only (not the defaults)
							 */
							//drupal_set_message(sprintf('<pre>CA has no record %s</pre>', print_r($permissions, TRUE)));
							/*
							* rebuild permissions as new_permissions
							*/
							$new_permissions = array();
							/*
							 * the view access settings
							 */
							if ($view) {
								/*
								 * rebuild
								 */
								$new_permissions['view'][0] = 3; // admin
							} else {
								$new_permissions['view'][0] = 3; // admin
							}
							/*
							 * the view_own access settings
							 */
							if ($view_own) {
								/*
								 * rebuild
								 */
								$new_permissions['view_own'][0] = 3; // admin
							} else {
								$new_permissions['view_own'][0] = 3; // admin
							}
							/*
							 * the update access settings
							 */
							if ($update) {
								/*
								 * rebuild
								 */
								$new_permissions['update'][0] = 3; // admin
							} else {
								$new_permissions['update'][0] = 3; // admin
							}
							/*
							 * the update_own access settings
							 */
							if ($update_own) {
								/*
								 * rebuild
								 */
								$new_permissions['update_own'][0] = 3; // admin
							} else {
								$new_permissions['update_own'][0] = 3; // admin
							}
							/*
							 * the delete access settings
							 */
							if ($delete) {
								/*
								 * rebuild
								 */
								$new_permissions['delete'][0] = 3; // admin
							} else {
								$new_permissions['delete'][0] = 3; // admin
							}
							/*
							 * the delete_own access settings
							 */
							if ($delete_own) {
								/*
								 * rebuild
								 */
								$new_permissions['delete_own'][0] = 3; // admin
							} else {
								$new_permissions['delete_own'][0] = 3; // admin
							}
							//drupal_set_message(sprintf('<pre>CA has record %s</pre>', print_r($new_permissions, TRUE)));
							content_access_save_per_node_settings($node, $new_permissions);
							node_access_acquire_grants($node);
							module_invoke_all('per_node', $new_permissions);
						}
					}
				} else {
					/*
					 * skip this node record if the node is invalid
					 */
					drupal_set_message(t('Invalid node (nid='.$nid.') found in WISE ridnid table.'),'Warning');
				}
				/*
				 * find the block records for this role according to the WISE ridblock table
				 */
				$ridblock_query = db_select("c_a_wise_ridblock")
				->fields('c_a_wise_ridblock',array('module','delta','rid'))
				->condition('rid',$rid,"=");
				$ridblock_query_results = $ridblock_query->execute()->fetchAll();
				/*
				 * for each block record
				 */
				foreach($ridblock_query_results as $ridblock_record) {
					/*
					 * get the ridblock record field values
					 */
					$module = $ridblock_record->module;
					$delta = $ridblock_record->delta;
					/*
					 * now simply add or remove them from the block_role table
					 * (really, that's it?! we'll see...) 
					 */
					$blockrole_query_results = array();
					$blockrole_query = db_select("block_role")
					->fields('block_role',array('module','delta','rid'))
					->condition('module',$module,"=")
					->condition('delta',$delta,"=")
					->condition('rid',$rid,"=");
					$blockrole_query_results = $blockrole_query->execute()->fetchAll();
					if($rid_selected>0) {
						/*
						 * it needs to be in the block_role table
						 */
						if($blockrole_query_results) {
							// do nothing, it is there already
						} else {
							// add it
							$blunk = db_insert('block_role')
							->fields(array(
									'module' => $module,
									'delta' => $delta,
									'rid' => $rid,
							))
							->execute();
						}
					} else {
						/*
						 * it needs to NOT be in the block_role table
						 */
						if($blockrole_query_results) {
							// remove it
							$blunk = db_delete('block_role')
							->condition('module',$module,"=")
							->condition('delta',$delta,"=")
							->condition('rid',$rid,"=")
							->execute();
						} else {
							// do nothing, it is not there
						}
					}
				}
			}
		} else {
			/*
			 * skip this role - should not happen
			 * role should not be in list if it is not valid
			 */
			drupal_set_message(t('Invalid role (rid='.$rid.') found in WISE ridnid table.'),'Warning');
		}
	}
	drupal_set_message(t('Your data has been saved.'));
}
/*
 * Implementation of hook_theme().
 */
/*
function c_a_wise_theme() {
	return array(
			'c_a_wise_form' => array(
					'render element' => 'form',
			),
	);
}
*/